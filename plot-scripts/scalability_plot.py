import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42

original_val = [900, 58, 114, 170, 450, 170, 420, 225, 347, 495, 669, 883, 1095, 1347, 63, 119, 278, 521, 443, 884, 200, 45, 75, 105, 255, 150]
num_circuits = len(original_val)
circuit_names = ['adder_8', 'barenco_tof_3', 'barenco_tof_4', 'barenco_tof_5', 'barenco_tof_10', 'csla_mux_3', 'csum_mux_9', 'gf2^4_mult', 'gf2^5_mult', 'gf2^6_mult', 'gf2^7_mult', 'gf2^8_mult', 'gf2^9_mult', 'gf2^10_mult', 'mod5_4', 'mod_mult_55', 'mod_red_21', 'qcla_adder_10', 'qcla_com_7', 'qcla_mod_7', 'rc_adder_6', 'tof_3', 'tof_4', 'tof_5', 'tof_10', 'vbe_adder_3']


gates = [
#1*
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 236, 450, 349, 727, 174, 39, 63, 87, 207, 115, ],
#21
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#31
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#41
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#51
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#61
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#71
[732, 46, 86, 126, 326, 164, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 105, 226, 450, 347, 727, 174, 39, 63, 87, 207, 115, ],
#22
[644, 42, 78, 114, 294, 160, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 97, 202, 416, 293, 657, 154, 35, 55, 75, 175, 95, ],
#32
[640, 42, 78, 114, 294, 152, 308, 180, 279, 391, 531, 703, 877, 1062, 51, 94, 202, 414, 293, 657, 152, 35, 55, 75, 175, 95, ],
#42
[640, 42, 78, 114, 294, 152, 308, 180, 279, 391, 531, 703, 869, 1058, 51, 94, 202, 414, 293, 657, 152, 35, 55, 75, 175, 95, ],
#52
[640, 42, 78, 114, 294, 152, 308, 180, 279, 391, 531, 703, 869, 1058, 51, 94, 202, 414, 293, 657, 152, 35, 55, 75, 175, 95, ],
#62
[640, 42, 78, 114, 294, 152, 308, 180, 279, 391, 531, 703, 877, 1058, 51, 94, 202, 414, 293, 657, 152, 35, 55, 75, 175, 95, ],
#72
[644, 42, 78, 114, 294, 152, 308, 180, 279, 391, 531, 703, 877, 1058, 51, 94, 202, 414, 293, 657, 152, 35, 55, 75, 175, 95, ],
#23
[644, 42, 78, 114, 294, 160, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 97, 202, 416, 293, 657, 154, 35, 55, 75, 175, 95, ],
#33
[638, 40, 72, 104, 268, 146, 280, 176, 273, 381, 517, 690, 857, 1030, 45, 92, 202, 407, 289, 654, 152, 35, 55, 75, 175, 91, ],
#43
[634, 40, 72, 104, 271, 148, 280, 175, 273, 383, 519, 703, 856, 1049, 41, 93, 202, 408, 288, 651, 152, 35, 55, 75, 175, 91, ],
#53
[688, 40, 72, 104, 271, 149, 280, 177, 273, 386, 529, 703, 870, 1052, 27, 93, 202, 408, 288, 677, 152, 35, 55, 75, 175, 89, ],
#63
[724, 38, 68, 98, 262, 154, 272, 177, 277, 391, 531, 703, 873, 1058, 26, 93, 202, 422, 292, 719, 154, 35, 55, 75, 175, 85, ],
#73
[732, 38, 68, 100, 316, 156, 302, 178, 279, 393, 539, 703, 879, 1062, 31, 94, 210, 444, 339, 727, 154, 35, 55, 75, 175, 85, ],
#24
[644, 42, 78, 114, 294, 160, 308, 186, 287, 401, 543, 703, 879, 1062, 51, 97, 202, 416, 293, 657, 154, 35, 55, 75, 175, 95, ],
#34
[634, 40, 72, 104, 268, 150, 280, 175, 277, 386, 524, 703, 857, 1061, 45, 92, 202, 408, 289, 655, 152, 35, 55, 75, 175, 91, ],
#44
[706, 40, 72, 104, 275, 148, 280, 177, 277, 391, 530, 703, 871, 1058, 37, 93, 202, 414, 288, 697, 152, 35, 55, 75, 175, 90, ],
#54
[730, 40, 72, 104, 298, 153, 305, 178, 279, 391, 537, 703, 877, 1062, 32, 93, 202, 436, 321, 723, 154, 35, 55, 75, 175, 91, ],
#64
[732, 38, 68, 102, 322, 153, 306, 180, 281, 399, 543, 703, 879, 1062, 26, 94, 224, 448, 347, 727, 154, 35, 55, 75, 187, 90, ],
]
# geomean_reduction = [
# #0.1866962427,0.1882289362,0.2465355955,0.2465355955,0.2465355955,0.1882289362,0.2465355955,0.2562803581,0.2562803581,0.1882289362,0.2499691484,0.2596695039,0.2566010355,0.1882289362,0.2499691484,0.2566768499,0.2463763386,0.1882289362,0.2499691484,0.269384851,0.2584928583,0.1882289362,0.2499691484,0.2635408184,0.1882289362,0.2499691484,0.2554523103
# #0.1866962427,0.1882289362,0.247139113,0.247139113,0.247139113,0.1882289362,0.2534185888,0.2773252033,0.2743066396,0.1882289362,0.2537899912,0.2896708221,0.273015476,0.1882289362,0.2537899912,0.2729601011,0.263164446,0.1882289362,0.2535269383,0.2881346149,0.2585135971,0.1882289362,0.2533480347,0.2693378121
# #0.1865446783,0.1881389164,0.2493212202,0.2493212202,0.2493212202,0.1881389164,0.2558318573,0.2769875983,0.2738465634,0.1881389164,0.2562168634,0.2751684113,0.2667843512,0.1881389164,0.2562168634,0.2704346068,0.252118106,0.1881389164,0.2559441762,0.2712982504,0.240929686,0.1881389164,0.2557587181,0.2524504466
# 0.1866962427,0.1882289362,0.247139113,0.247139113,0.247139113,0.1882289362,0.2534185888,0.2773252033,0.2743066396,0.1882289362,0.2537899912,0.2781659738,0.273015476,0.1882289362,0.2537899912,0.2852107169,0.263164446,0.1882289362,0.2535269383,0.2870599635,0.2585135971,0.1882289362,0.2533480347,0.2643781063
# ]

plt.figure(constrained_layout=True)
plt.xlabel('n used for (n,q)-complete ECC set', fontsize=12, fontweight='bold')
maxn = 7  # 8
plt.xticks(range(0, maxn + 1), fontsize=12)
# plt.gca().xaxis.set_label_coords(0.5, -0.08)
plt.ylabel('Gate Count Geo. Mean Reduction', fontsize=12, fontweight='bold')
plt.ylim(0.183, 0.303)
plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0))
plt.yticks(fontsize=12)
for q in range(1, 5):
    ns = list(range(1, maxn + 1 if q < 4 else 7))
    # print('plotting indices:', [max(0, n * 4 + q - 8 - (n == 8)) for n in ns])
    # reduction = [geomean_reduction[max(0, n * 4 + q - 8 - (n == 8))] for n in ns]
    reduction = []
    for n in ns:
        id = 0 if n == 1 else (maxn - 1) * (q - 1) + n - 1
        prod = 1
        for i in range(num_circuits):
            prod *= gates[id][i] / original_val[i]
        prod = 1 - prod**(1 / num_circuits)
        reduction.append(prod)
    ns = [0] + ns
    reduction = [reduction[0]] + reduction
    plt.plot(ns, reduction, ['*-', 's-', 'o-', 'd-'][q - 1], markersize=7, label=f'q={q}')

fig = plt.gcf()
# plt.legend(loc='right', bbox_to_anchor=(1, 0.4), fontsize=12)
plt.legend(fontsize=12)
fig.set_size_inches(5.2, 3.6)
fig.savefig('scalability_plot.pdf', dpi=800)
fig.savefig('scalability_plot.png', dpi=800)
plt.show()

cnt = 0
for circuit_name in circuit_names:
    plt.cla()
    plt.figure(constrained_layout=True)
    plt.xlabel('n used for (n,q)-complete ECC set', fontsize=12, fontweight='bold')
    plt.xticks(range(0, maxn + 1), fontsize=12)
    plt.ylabel('Gate Count Reduction', fontsize=12, fontweight='bold')
    plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=1))
    plt.yticks(fontsize=12)
    for q in range(1, 5):
        ns = list(range(1, maxn + 1 if q < 4 else 7))
        reduction = []
        for n in ns:
            id = 0 if n == 1 else (maxn - 1) * (q - 1) + n - 1
            reduction.append(1 - gates[id][cnt] / original_val[cnt])
        ns = [0] + ns
        reduction = [reduction[0]] + reduction
        plt.plot(ns, reduction, ['*-', 's-', 'o-', 'd-'][q - 1], markersize=7, label=f'q={q}')
    fig = plt.gcf()
    plt.legend(fontsize=12)
    fig.set_size_inches(5.2, 3.6)
    circuit_file_name = circuit_name.replace('^', '_')
    fig.savefig(f'scalability_plot_{circuit_file_name}.pdf', dpi=800)
    circuit_name_escaped = circuit_name.replace('_', '\_').replace('^', '\^{}')
    print(f'''
\\begin{{figure}}
\\centering
\\includegraphics[width=\evalfigfrac\linewidth]{{figures/appendix/scalability_plot_{circuit_file_name}.pdf}}
\\caption{{\\texttt{{{circuit_name_escaped}}} ({original_val[cnt]} gates).}}
\\label{{fig:scalability:{circuit_name}}}
\\end{{figure}}
''')
    cnt += 1
    plt.close()


